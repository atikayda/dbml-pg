DBML {
  // ===== Top Level =====
  Schema = Element*

  Element = Project
          | Table  
          | TablePartial
          | Ref
          | Enum
          | TableGroup

  // ===== Project Definition =====
  Project = project identifier "{" ProjectBody "}"
  ProjectBody = ProjectProperty*
  ProjectProperty = identifier ":" Value

  // ===== Table Definition =====
  Table = table QualifiedIdentifier TableAlias? "{" TableBody "}"
  
  QualifiedIdentifier = identifier "." identifier  -- qualified
                      | identifier  -- simple
  TableAlias = as identifier
  TableBody = TableElement*
  
  TableElement = Column
               | Indexes
               | Constraints
               | Note
               | HeaderColor
               | PartialReference

  // ===== TablePartial Definition =====
  TablePartial = tablepartial identifier "{" TablePartialBody "}"
  TablePartialBody = TablePartialElement*
  
  TablePartialElement = Column
                      | Indexes
                      | Constraints
                      | Note
  
  PartialReference = "~" identifier

  // ===== Column Definition =====
  Column = identifier DataType ColumnSettings?
  
  DataType = identifier "[]"                       -- array
           | identifier "(" TypeParams ")"         -- parameterized
           | identifier                            -- simple
  
  TypeParams = (~")" any)+

  ColumnSettings = "[" ListOf<ColumnSetting, ","> "]"
  
  ColumnSetting = pk  -- pk
                | primary key  -- primaryKey
                | unique  -- unique
                | not null  -- notNull
                | null  -- null
                | increment  -- increment
                | generated always as identity  -- identityAlways
                | generated by default as identity  -- identityByDefault
                | generated always as backtickString stored  -- generatedStored
                | check backtickString  -- check
                | ColumnDefault
                | ColumnNote
                | ColumnRef

  // (These are now handled directly in ColumnSetting)
  ColumnDefault = default ":" DefaultValue
  ColumnNote = note ":" Value
  ColumnRef = ref ":" RefType RefEndpoint

  DefaultValue = backtickString  -- expression
               | Value           -- literal

  // ===== Indexes =====
  Indexes = indexes "{" Index* "}"
  
  Index = "(" ListOf<IndexColumn, ","> ")" IndexSettings?  -- composite
        | identifier IndexSettings?  -- single
  
  IndexColumn = identifier SortOrder?
  SortOrder = asc  -- asc
            | desc  -- desc

  IndexSettings = "[" ListOf<IndexSetting, ","> "]"
  
  IndexSetting = IndexType
               | IndexName
               | IndexWhere
               | pk  -- pk
               | unique  -- unique

  IndexType = type ":" IndexTypeName
  IndexName = name ":" Value
  IndexWhere = where ":" Value

  // PostgreSQL index types
  IndexTypeName = btree  -- btree
                | hash  -- hash
                | gin  -- gin
                | gist  -- gist
                | spgist  -- spgist
                | brin  -- brin
                | identifier  -- custom

  // ===== Constraints =====
  Constraints = constraints "{" Constraint* "}"
  
  Constraint = ConstraintName? ConstraintType ConstraintSettings?
  
  ConstraintName = constraint identifier
  
  ConstraintType = check backtickString  -- check
                 | unique "(" ListOf<identifier, ","> ")"  -- unique
                 | primary key "(" ListOf<identifier, ","> ")"  -- primaryKey
                 | exclude using identifier "(" identifier with ExcludeOperator ")"  -- exclude
  
  ExcludeOperator = "&&" | "=" | "<>" | "@>" | "<@" | "||" | "-|-" | "~" | any+
  
  ConstraintSettings = "[" ListOf<ConstraintSetting, ","> "]"
  
  ConstraintSetting = deferrable  -- deferrable
                    | not deferrable  -- notDeferrable
                    | initially deferred  -- initiallyDeferred
                    | initially immediate  -- initiallyImmediate

  // ===== References =====
  Ref = ref RefName? ":" RefEndpoint RefType RefEndpoint RefSettings?
  RefName = identifier
  RefEndpoint = identifier "." identifier "." "(" ListOf<identifier, ","> ")"  -- compositeQualified
              | identifier "." "(" ListOf<identifier, ","> ")"  -- composite
              | identifier "." identifier "." identifier  -- simpleQualified
              | identifier "." identifier  -- simple
  RefType = "<>"  -- many
          | ">"  -- to
          | "<"  -- from
          | "-"  -- one
  
  RefSettings = "[" ListOf<RefSetting, ","> "]"
  RefSetting = RefOnDelete  -- delete
             | RefOnUpdate  -- update
  RefOnDelete = delete ":" RefAction
  RefOnUpdate = update ":" RefAction
  
  RefAction = cascade  -- cascade
            | restrict  -- restrict
            | set null  -- setNull
            | set default  -- setDefault
            | no action  -- noAction

  // ===== Enums =====
  Enum = enum identifier "{" EnumValue* "}"
  EnumValue = identifier EnumValueNote?
  EnumValueNote = "[" note ":" Value "]"

  // ===== Table Groups =====
  TableGroup = tablegroup identifier "{" identifier* "}"

  // ===== Notes and Misc =====
  Note = note ":" Value
  HeaderColor = headercolor ":" (HexColor | Value)
  
  HexColor = "#" hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit

  // ===== Values =====
  Value = tripleString
        | doubleString
        | singleString
        | number
        | boolean
        | identifier

  tripleString = "'''" (~"'''" any)* "'''"
  doubleString = "\"" doubleStringChar* "\""
  singleString = "'" singleStringChar* "'"
  
  doubleStringChar = "\\" any  -- escape
                   | ~("\"" | "\\") any  -- normal
  singleStringChar = "\\" any  -- escape
                   | ~("'" | "\\") any  -- normal

  backtickString = "`" (~"`" any)* "`"

  number = "-"? digit+ ("." digit+)?
  boolean = true  -- true
          | false  -- false

  // ===== Identifiers and Keywords =====
  identifier = quotedIdentifier
             | identifierName
  
  quotedIdentifier = "\"" (~"\"" any)* "\""
  identifierName = ~reservedWord (letter | "_") (letter | digit | "_")*
  
  // Reserved word matching (exact match only)
  reservedWord = (project | table | tablepartial | ref | enum | tablegroup | indexes | constraints) ~(letter | digit | "_")

  // Keywords (case-insensitive)
  project = caseInsensitive<"project">
  table = caseInsensitive<"table">
  tablepartial = caseInsensitive<"tablepartial">
  ref = caseInsensitive<"ref">
  enum = caseInsensitive<"enum">
  tablegroup = caseInsensitive<"tablegroup">
  indexes = caseInsensitive<"indexes">
  note = caseInsensitive<"note">
  headercolor = caseInsensitive<"headercolor">
  as = caseInsensitive<"as">
  type = caseInsensitive<"type">
  name = caseInsensitive<"name">  
  where = caseInsensitive<"where">
  default = caseInsensitive<"default">
  not = caseInsensitive<"not">
  null = caseInsensitive<"null">
  primary = caseInsensitive<"primary">
  key = caseInsensitive<"key">
  delete = caseInsensitive<"delete">
  update = caseInsensitive<"update">
  set = caseInsensitive<"set">
  no = caseInsensitive<"no">
  action = caseInsensitive<"action">
  true = caseInsensitive<"true">
  false = caseInsensitive<"false">
  
  // Column and index keywords
  pk = caseInsensitive<"pk">
  unique = caseInsensitive<"unique">
  increment = caseInsensitive<"increment">
  
  // Sort orders
  asc = caseInsensitive<"asc">
  desc = caseInsensitive<"desc">
  
  // Index types
  btree = caseInsensitive<"btree">
  hash = caseInsensitive<"hash">
  gin = caseInsensitive<"gin">
  gist = caseInsensitive<"gist">
  spgist = caseInsensitive<"spgist">
  brin = caseInsensitive<"brin">
  
  // Reference actions
  cascade = caseInsensitive<"cascade">
  restrict = caseInsensitive<"restrict">
  
  // Identity column keywords
  generated = caseInsensitive<"generated">
  always = caseInsensitive<"always">
  by = caseInsensitive<"by">
  identity = caseInsensitive<"identity">
  
  // Generated column keywords
  stored = caseInsensitive<"stored">
  
  // Constraint keywords
  check = caseInsensitive<"check">
  constraints = caseInsensitive<"constraints">
  constraint = caseInsensitive<"constraint">
  exclude = caseInsensitive<"exclude">
  using = caseInsensitive<"using">
  with = caseInsensitive<"with">
  deferrable = caseInsensitive<"deferrable">
  initially = caseInsensitive<"initially">
  deferred = caseInsensitive<"deferred">
  immediate = caseInsensitive<"immediate">

  // (Reserved words are handled by reservedWord rule above)

  // ===== Whitespace and Comments =====
  space += comment
  comment = "//" (~newline any)* newline?
          | "/*" (~"*/" any)* "*/"
  
  newline = "\n"  -- lf
          | "\r"  -- cr
          | "\r\n"  -- crlf
}