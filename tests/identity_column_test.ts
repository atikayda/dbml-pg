/**
 * Tests for PostgreSQL identity column support
 */

import { assertEquals } from "@std/assert";
import { Parser } from "../src/parser.ts";

Deno.test("Identity columns - GENERATED ALWAYS AS IDENTITY", () => {
  const dbml = `
    Table users {
      id bigint [generated always as identity, pk]
      name text [not null]
    }
  `;

  const parser = new Parser();
  const schema = parser.parse(dbml);

  const idCol = schema.tables[0].columns[0];
  assertEquals(idCol.name, "id");
  assertEquals(idCol.type, "bigint");
  assertEquals(idCol.identityGeneration, "always");
  assertEquals(idCol.pk, true);
});

Deno.test("Identity columns - GENERATED BY DEFAULT AS IDENTITY", () => {
  const dbml = `
    Table products {
      id integer [generated by default as identity, pk]
      name varchar(255)
    }
  `;

  const parser = new Parser();
  const schema = parser.parse(dbml);

  const idCol = schema.tables[0].columns[0];
  assertEquals(idCol.name, "id");
  assertEquals(idCol.type, "integer");
  assertEquals(idCol.identityGeneration, "by default");
  assertEquals(idCol.pk, true);
});

Deno.test("Identity columns - Case insensitive parsing", () => {
  const dbml = `
    Table test {
      id1 bigint [GENERATED ALWAYS AS IDENTITY]
      id2 integer [Generated By Default As Identity]
      id3 smallint [generated BY default AS identity]
    }
  `;

  const parser = new Parser();
  const schema = parser.parse(dbml);

  const columns = schema.tables[0].columns;
  assertEquals(columns[0].identityGeneration, "always");
  assertEquals(columns[1].identityGeneration, "by default");
  assertEquals(columns[2].identityGeneration, "by default");
});

Deno.test("Identity columns - Mixed with other settings", () => {
  const dbml = `
    Table orders {
      order_id bigserial [generated always as identity, pk, note: 'Auto-generated ID']
      user_id bigint [not null, ref: > users.id]
      status text [default: 'pending']
    }
  `;

  const parser = new Parser();
  const schema = parser.parse(dbml);

  const orderIdCol = schema.tables[0].columns[0];
  assertEquals(orderIdCol.identityGeneration, "always");
  assertEquals(orderIdCol.pk, true);
  assertEquals(orderIdCol.note, "Auto-generated ID");
});